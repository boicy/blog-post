This is the fifth part of a multi-part series of blog posts on Micro-services.  There seems to be alot of ambiguity amongst the community around what these things are, when they should be used and how to approach them.  This blog series is basically a regurgitation of 5 years of building and learning about micro-services.  I imagine that not everybody will agree with everything I say here, but I hope that there is nothing so controversial as to cause serious disagreements. 

4. The fundamentals of micro-services

So you've decided that you want to build some micro-services.  The question now becomes, how do I build this in an effective manner that will reduce the challenges and provide the greatest value for the project.  Well before you get yourself stuck into micro-services I think it's imperative to understand some of the fundamentals that underly the concepts.

a) Domain driven design

Eric Evans wrote a wonderful (and terribly dry) book about the concept of domain driven design.  I think there is a lot of value in reading the book, but I have a dirty secret.  I didn't read the whole thing.  Instead, I read probably the first half.  However, fortunately there is a fantastic summary published(1) that covers many of the core concepts explained in the book.  The key concept that appears to come up in most conversations revolving around micro-services is Bounded Contexts.  

I have found that this is a VERY VERY important


(1) Link to the pdf published on the topic